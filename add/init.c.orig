#include "stm32f4xx.h"
#include <stdio.h>
#include "init.h"
#include "mytime.h"

void display_ledinit(void) {

    GPIO_InitTypeDef  GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(LED1_RUN_GPIO_RCC|LED4_CAN1_GPIO_RCC|LED5_CAN2_GPIO_RCC|LED6_NET_RCC, ENABLE);//使能GPIOF时钟

    GPIO_InitStructure.GPIO_Pin = LED1_RUN_PIN ;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(LED1_RUN_PORT, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = LED4_CAN1_PIN ;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(LED4_CAN1_PORT, &GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin = LED5_CAN2_PIN ;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(LED5_CAN2_PORT, &GPIO_InitStructure);


    GPIO_InitStructure.GPIO_Pin = LED6_NET_PIN ;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(LED6_NET_PORT, &GPIO_InitStructure);

    GPIO_ResetBits(LED1_RUN_PORT,LED1_RUN_PIN );
    GPIO_SetBits(LED4_CAN1_PORT,LED4_CAN1_PIN );
    GPIO_SetBits(LED5_CAN2_PORT,LED5_CAN2_PIN );
    GPIO_SetBits(LED6_NET_PORT,LED6_NET_PIN );
}

void led_start(void)
{
    GPIO_ResetBits(LED4_CAN1_PORT,LED4_CAN1_PIN );
    GPIO_ResetBits(LED5_CAN2_PORT,LED5_CAN2_PIN );
    GPIO_ResetBits(LED6_NET_PORT,LED6_NET_PIN );
    delay_ms(1000);
    GPIO_SetBits(LED4_CAN1_PORT,LED4_CAN1_PIN );
    GPIO_SetBits(LED5_CAN2_PORT,LED5_CAN2_PIN );
    GPIO_SetBits(LED6_NET_PORT,LED6_NET_PIN );
    delay_ms(1000);
    GPIO_ResetBits(LED4_CAN1_PORT,LED4_CAN1_PIN );
    GPIO_ResetBits(LED5_CAN2_PORT,LED5_CAN2_PIN );
    GPIO_ResetBits(LED6_NET_PORT,LED6_NET_PIN );
    delay_ms(1000);
        GPIO_SetBits(LED4_CAN1_PORT,LED4_CAN1_PIN );
    GPIO_SetBits(LED5_CAN2_PORT,LED5_CAN2_PIN );
    GPIO_SetBits(LED6_NET_PORT,LED6_NET_PIN );
        delay_ms(1000);
    GPIO_ResetBits(LED4_CAN1_PORT,LED4_CAN1_PIN );
    GPIO_ResetBits(LED5_CAN2_PORT,LED5_CAN2_PIN );
    GPIO_ResetBits(LED6_NET_PORT,LED6_NET_PIN );
    delay_ms(1000);
        GPIO_SetBits(LED4_CAN1_PORT,LED4_CAN1_PIN );
    GPIO_SetBits(LED5_CAN2_PORT,LED5_CAN2_PIN );
    GPIO_SetBits(LED6_NET_PORT,LED6_NET_PIN );

}

void JEC_IO_Init(void)
{
    //两个外部IO输出，C0=PA8，C1=PC9
    //三个LED：PC6、PC7、PC8
    //与NB/4G模块通信的串口 USART2，PA2=Tx，PA3=Rx
    //NB控制和状态：PC14=NB_NETLIGHT，PC15=NB_RST
    //4G模块控制和状态：PA11=LINKA，PA12=LINKB，PA15=PWRON，PC12=WORK，PD2=NET
    //4-20mA接收模块通信：PC10=UART4_TX，PC11=UART4_RX
    //外部RS485口，PB12=TR，PB10=USART3_TX，PB11=USART3_RX

    //输出：PC6、PC7、PC8、PC9、PC15、PA8、PA15、PB12
    //输入：PC12、PC14、PA11、PA12、PD2
    //串口：USART1, USART2, USART3, UART4

//	GPIO_InitTypeDef  GPIO_InitStructure;

//  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOB|RCC_AHB1Periph_GPIOC|RCC_AHB1Periph_GPIOD, ENABLE);//使能GPIOG时钟

//  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_15;         //
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;                  //普通输出模式
//  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;                 //推挽输出
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;               //2MHz
//  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;                   //上拉
//  GPIO_Init(GPIOC, &GPIO_InitStructure);                         //
//
//  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_15;         //
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;                  //普通输出模式
//  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;                 //推挽输出
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;               //2MHz
//  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;                   //上拉
//  GPIO_Init(GPIOA, &GPIO_InitStructure);

//  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;         //
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;                  //普通输出模式
//  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;                 //推挽输出
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;               //2MHz
//  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;                   //上拉
//  GPIO_Init(GPIOB, &GPIO_InitStructure);
////PC12、PC14、PA11、PA12、PD2
//  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_14;
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;                  //
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;              //2MHz
//  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;                   //上拉
//  GPIO_Init(GPIOC, &GPIO_InitStructure);
//
//  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;                  //
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;              //2MHz
//  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;                   //上拉
//  GPIO_Init(GPIOA, &GPIO_InitStructure);

//  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;                  //
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;              //2MHz
//  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;                   //上拉
//  GPIO_Init(GPIOD, &GPIO_InitStructure);

//	//三个LED不亮
//	GPIO_SetBits(GPIOC, GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8);
//	//NB模块复位信号拉高
//	GPIO_SetBits(GPIOC, GPIO_Pin_15);
//	//4G模块开机信号低电平有效，初始化中拉高
//	GPIO_SetBits(GPIOA, GPIO_Pin_15);
    display_ledinit();
}

void JEC_USART_Init(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef  GPIO_InitStructure;

    //串口：USART1=RS232, USART2=NB/4G, USART3=RS485, UART4=CLoop
    //USART1
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //使能GPIOA时钟
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART1时钟
    //串口1对应引脚复用映射
    GPIO_PinAFConfig(GPIOA,GPIO_PinSource6,GPIO_AF_USART1);  //GPIOA9复用为USART1
    GPIO_PinAFConfig(GPIOA,GPIO_PinSource7,GPIO_AF_USART1); //GPIOA10复用为USART1
    //USART1端口配置
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; //GPIOA9与GPIOA10
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;      //复用功能
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;   //上拉
    GPIO_Init(GPIOB,&GPIO_InitStructure);          //初始化PA9，PA10
    //USART1 初始化设置
    USART_InitStructure.USART_BaudRate = 115200;     //波特率设置
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
    USART_InitStructure.USART_StopBits = USART_StopBits_1;  //一个停止位
    USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
    USART_Init(USART1, &USART_InitStructure); //初始化串口1
    USART_Cmd(USART1, ENABLE);  //使能串口1

    USART_ClearFlag(USART1, USART_FLAG_TC);
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);         //开启相关中断
    //Usart1 NVIC 配置
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;      //串口1中断通道
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
    NVIC_InitStructure.NVIC_IRQChannelSubPriority =0;		   //子优先级3
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			   //IRQ通道使能
    NVIC_Init(&NVIC_InitStructure);

    //USART2
    if(1) {
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);//使能USART2时钟
        //串口2对应引脚复用映射
        GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);  //GPIOA2复用为USART2
        GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2); //GPIOA3复用为USART2
        //USART2端口配置
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3; //GPIOA9与GPIOA10
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;      //复用功能
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;   //上拉
        GPIO_Init(GPIOA,&GPIO_InitStructure);          //初始化PA2，PA3
        //USART1 初始化设置
        USART_InitStructure.USART_BaudRate = 115200;     //波特率设置
        USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
        USART_InitStructure.USART_StopBits = USART_StopBits_1;  //一个停止位
        USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
        USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
        USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
        USART_Init(USART2, &USART_InitStructure); //初始化串口
        USART_Cmd(USART2, ENABLE);  //使能串口
        //
        USART_ClearFlag(USART2, USART_FLAG_TC);
        USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);         //开启相关中断
        //Usart2 NVIC 配置
        NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;      //串口3中断通道
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
        NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;		   //子优先级3
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			   //IRQ通道使能
        NVIC_Init(&NVIC_InitStructure);
    }
    //配置串口3
    //复用  Tx=B10  Rx=B11
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE); //使能GPIOB时钟
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);//使能USART3时钟
    //串口1对应引脚复用映射
    GPIO_PinAFConfig(GPIOB,GPIO_PinSource8,GPIO_AF_USART3);
    GPIO_PinAFConfig(GPIOB,GPIO_PinSource9,GPIO_AF_USART3);
    //USART3端口配置
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9; //GPIOB10与GPIOB11
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;      //复用功能
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;   //上拉
    GPIO_Init(GPIOB,&GPIO_InitStructure);
    //USART3 初始化设置
    USART_InitStructure.USART_BaudRate = 115200;     //波特率设置
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
    USART_InitStructure.USART_StopBits = USART_StopBits_1;  //一个停止位
    USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
    USART_Init(USART3, &USART_InitStructure); //初始化串口1
    USART_Cmd(USART3, ENABLE);  //使能串口1
    //MAX485芯片控制线
    GPIO_ResetBits(GPIOB, GPIO_Pin_12); //MAX485R;

    USART_ClearFlag(USART3, USART_FLAG_TC);
    USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);         //开启相关中断
    //Usart3 NVIC 配置
    NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;      //串口3中断通道
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0;//抢占优先级3
    NVIC_InitStructure.NVIC_IRQChannelSubPriority =2;		   //子优先级3
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			   //IRQ通道使能
    NVIC_Init(&NVIC_InitStructure);

//	//配置串口4
//	//复用  Tx=C10  Rx=C11
//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); //使能GPIO
//	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4,ENABLE);//使能UART4时钟
//	//串口4对应引脚复用映射
//	GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_UART4);
//	GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_UART4);
//	//USART4端口配置
//  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;      //复用功能
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
//	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
//	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;   //上拉
//	GPIO_Init(GPIOC,&GPIO_InitStructure);

//   //USART4 初始化设置
//	USART_InitStructure.USART_BaudRate = 9600;     //波特率设置
//	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
//	USART_InitStructure.USART_StopBits = USART_StopBits_1;  //一个停止位
//	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
//	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
//	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
//  USART_Init(UART4, &USART_InitStructure); //初始化串口1
//  USART_Cmd(UART4, ENABLE);  //使能串口1
//
//	USART_ClearFlag(UART4, USART_FLAG_TC);
//	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);         //开启相关中断
//	//UART4 NVIC 配置
//  NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;      //串口4中断通道
//	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
//	NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;		   //子优先级3
//	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			   //IRQ通道使能
//	NVIC_Init(&NVIC_InitStructure);


}
